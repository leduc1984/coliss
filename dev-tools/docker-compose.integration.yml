version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    container_name: pokemon-mmo-db
    environment:
      POSTGRES_DB: pokemon_mmo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-pokemon123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - pokemon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: pokemon-mmo-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - pokemon-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: pokemon-mmo-api-gateway
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-pokemon123}@postgres:5432/pokemon_mmo
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key-change-in-production}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pokemon-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # UI Editor
  ui-editor:
    build:
      context: ./ui-editor
      dockerfile: Dockerfile
    container_name: pokemon-mmo-ui-editor
    environment:
      REACT_APP_API_GATEWAY_URL: http://localhost:3001
      REACT_APP_WEBSOCKET_URL: ws://localhost:3001/ws
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    networks:
      - pokemon-network
    restart: unless-stopped
    volumes:
      - ./ui-editor/exports:/app/exports

  # Dialogue Editor
  dialogue-editor:
    build:
      context: ./dialogue-editor
      dockerfile: Dockerfile
    container_name: pokemon-mmo-dialogue-editor
    environment:
      REACT_APP_API_GATEWAY_URL: http://localhost:3001
      REACT_APP_WEBSOCKET_URL: ws://localhost:3001/ws
    ports:
      - "3001:3000"
    depends_on:
      - api-gateway
    networks:
      - pokemon-network
    restart: unless-stopped
    volumes:
      - ./dialogue-editor/exports:/app/exports

  # Monster Editor
  monster-editor:
    build:
      context: ./monster-editor
      dockerfile: Dockerfile
    container_name: pokemon-mmo-monster-editor
    environment:
      REACT_APP_API_GATEWAY_URL: http://localhost:3001
      REACT_APP_DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-pokemon123}@postgres:5432/pokemon_mmo
    ports:
      - "3002:3000"
    depends_on:
      - api-gateway
    networks:
      - pokemon-network
    restart: unless-stopped
    volumes:
      - ./monster-editor/exports:/app/exports

  # Admin Panel
  admin-panel:
    build:
      context: ./admin-panel
      dockerfile: Dockerfile
    container_name: pokemon-mmo-admin-panel
    environment:
      REACT_APP_API_GATEWAY_URL: http://localhost:3001
      REACT_APP_WEBSOCKET_URL: ws://localhost:3001/ws
    ports:
      - "3003:3000"
    depends_on:
      - api-gateway
    networks:
      - pokemon-network
    restart: unless-stopped

  # NGINX Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pokemon-mmo-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/ssl/certs
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - ui-editor
      - dialogue-editor
      - monster-editor
      - admin-panel
      - api-gateway
    networks:
      - pokemon-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: pokemon-mmo-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pokemon-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: pokemon-mmo-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - pokemon-network
    restart: unless-stopped

  # Backup service
  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    container_name: pokemon-mmo-backup
    environment:
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-pokemon123}@postgres:5432/pokemon_mmo
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      S3_BUCKET: ${S3_BACKUP_BUCKET:-pokemon-mmo-backups}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./backups:/app/backups
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - postgres
    networks:
      - pokemon-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  pokemon-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16